environment = "local"
environment = ${?ENV}

hostname = "couchmate.com"
hostname = ${?HOSTNAME}

features {
  anon {
    chat = true
    throttle = false
    throttleDuration = 15 seconds
  }

  room {
    pre-game = 15 minutes
    post-game = 15 minutes

    participant-size = 1000
    message-cache-size = 50
  }

  updater {
    pullSize = 24
    pullSize = ${?PULL_SIZE}
  }
}

apiKeys = [
  "048f1bb08bccaa44c22f93b98caa1148956319e6c50cbf4d00efa2fe5b72"
]

akka {
  loggers = [
    "akka.event.slf4j.Slf4jLogger"
  ]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "cluster"

    serialize-creators = on
    serialize-messages = on
    allow-java-serialization = on

    typed {
      extensions = [
        "com.couchmate.util.akka.extensions.DatabaseExtension",
        "com.couchmate.util.akka.extensions.PromExtension",
        "com.couchmate.util.akka.extensions.RoomExtension",
        "com.couchmate.util.akka.extensions.SingletonExtension",
        "com.couchmate.util.akka.extensions.MailExtension",
        "com.couchmate.util.akka.extensions.JwtExtension"
      ]
    }
  }

  remote {
    artery {
      enabled = on
    }
  }

  http {
    server-header = ""

    server {
      bind-timeout = 60s

      websocket {
        periodic-keep-alive-max-idle = 5s
      }
    }

    client {
      user-agent-header = ""
    }

    host-connection-pool {
      response-entity-subscription-timeout = 10 seconds
    }
  }

  persistence {
    journal {
      plugin = "jdbc-journal"
      auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }

  cluster {
    sharding {
      passivate-idle-entity-after = off
    }
  }

  management {
    http {
      bind-hostname = "0.0.0.0"
    }

    cluster {
      bootstrap {
        contact-point-discovery {
          discovery-method = kubernetes-api
          service-name = server
        }
      }
    }
  }

  quartz {
    defaultTimezone = EST
    schedules {
      EveryOtherDay {
        description = "Fire every other day at midnight"
        expression = "0 0 0 ? * MON,WED,FRI *"
      }
    }
  }
}

jdbc-journal {
  slick {
    profile = "slick.jdbc.PostgresProfile$"
    db = ${db}
  }
}

jdbc-snapshot-store {
  slick {
    profile = "slick.jdbc.PostgresProfile$"
    db = ${db}
  }
}

jdbc-read-journal {
  slick {
    profile = "slick.jdbc.PostgresProfile$"
    db = ${db}
  }
}

gracenote {
  apiKey = "5jjtwgka3e3jnges478b62hw"
  host = "data.tmsapi.com/v1.1"
}

db {
  connectionPool  = HikariCP
  dataSourceClass = org.postgresql.ds.PGSimpleDataSource
  properties {
    serverName    = localhost
    serverName    = ${?POSTGRES_HOST}
    portNumber    = 5432
    portNumber    = ${?POSTGRES_PORT}
    databaseName  = postgres
    databaseName  = ${?POSTGRES_DB}
    user          = postgres
    user          = ${?POSTGRES_USER}
    password      = ${?POSTGRES_PASSWORD}
  }
  numThreads = 5
  maxConnections = 5
  minConnections = 1
}

jwt {
  issuer = "couchmate.com"
  secret = "ah55jo7il7djkqfclimdj3j8r3dtk0jm"
  secret = ${?JWT_SECRET}
  encrypt = "pudjsf076ihnnd5m6v8f1t6qh4bq7qn5"
  encrypt = ${?JWT_ENCRYPT}
  expiry = 30d
}

mailgun {
  apiKey = ""
  apiKey = ${?MAILGUN_API_KEY}
  validationKey = ""
  validationKey = ${?MAILGUN_VALIDATION_KEY}
}