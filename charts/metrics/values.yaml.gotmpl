env: {{.Values.env}}

clientId: {{.Values.oauthClientId}}
clientSecret: {{.Values.oauthClientSecret}}
doToken: {{.Values.doToken}}
spacesKey: {{.Values.spacesKey}}
spacesSecret: {{.Values.spacesSecret}}
tsdbPassword: {{.Values.tsdbPassword}}
tsdbName: {{.Values.tsdbName}}
tsdbHost: {{.Values.tsdbHost}}
tsdbPort: {{.Values.tsdbPort}}

prometheus-operator:
  rbac:
    create: true
  prometheus:
    enabled: true
    remoteRead:
      - url: "http://metrics-timescale-prometheus-connector:9201/read"
    remoteWrite:
      - url: "http://metrics-timescale-prometheus-connector:9201/write"
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/issuer: letsencrypt-issuer
        nginx.ingress.kubernetes.io/auth-url: "https://$host/oauth2/auth"
        nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
        service.beta.kubernetes.io/do-loadbalancer-name: couchmate-{{.Values.env}}-grafana
        service.beta.kubernetes.io/do-loadbalancer-algorithm: 'least_connections'
        service.beta.kubernetes.io/do-loadbalancer-protocol: 'https'
        service.beta.kubernetes.io/do-loadbalancer-http-ports: '80'
        service.beta.kubernetes.io/do-loadbalancer-tls-ports: '443'
        service.beta.kubernetes.io/do-loadbalancer-tls-passthrough: 'true'
        service.beta.kubernetes.io/do-loadbalancer-redirect-http-to-https: 'true'
        external-dns.alpha.kubernetes.io/ttl: '120'
      hosts:
        - name: prometheus{{if ne .Values.env "prod"}}.{{.Values.env}}{{end}}.couchmate.com
          path: /
      tls:
        - hosts:
            - prometheus{{if ne .Values.env "prod"}}.{{.Values.env}}{{end}}.couchmate.com
          secretName: {{.Values.env}}-prometheus-tls
  alertmanager:
    enabled: false
  kubelet:
    serviceMonitor:
      cAdvisorMetricRelabelings:
        - sourceLabels: [id]
          regex: '/kubepods/besteffort/.*'
          action: keep
        - sourceLabels: [container]
          regex: '^(?!POD).*'
          action: keep
        - sourceLabels: [__name__, image]
          regex: container_([a-z_]+);
          action: drop
  kubeProxy:
    enabled: false
timescale-prometheus:
  connection:
    user: doadmin
    password:
      secretTemplate: tsdb-secret
    host:
      nameTemplate: {{.Values.tsdbHost}}
    port: {{.Values.tsdbPort}}
    dbName: {{.Values.tsdbName}}
  service:
    loadBalancer:
      enabled: false
grafana:
  admin:
    password: abcabc
  persistence:
    enabled: false
  datasources:
    secretName: data-providers-secret
  dashboardsProvider:
    enabled: true
  dashboardsConfigMaps:
    - configMapName: grafana-dashboard-application
      fileName: application.json
    - configMapName: grafana-dashboard-resources
      fileName: resources.json
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/issuer: letsencrypt-issuer
      nginx.ingress.kubernetes.io/auth-url: "https://$host/oauth2/auth"
      nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
      service.beta.kubernetes.io/do-loadbalancer-name: couchmate-{{.Values.env}}-prometheus
      service.beta.kubernetes.io/do-loadbalancer-algorithm: 'least_connections'
      service.beta.kubernetes.io/do-loadbalancer-protocol: 'https'
      service.beta.kubernetes.io/do-loadbalancer-http-ports: '80'
      service.beta.kubernetes.io/do-loadbalancer-tls-ports: '443'
      service.beta.kubernetes.io/do-loadbalancer-tls-passthrough: 'true'
      service.beta.kubernetes.io/do-loadbalancer-redirect-http-to-https: 'true'
      external-dns.alpha.kubernetes.io/ttl: '120'
    hosts:
      - name: grafana{{if ne .Values.env "prod"}}.{{.Values.env}}{{end}}.couchmate.com
        path: /
    tls:
      - hosts:
          - grafana{{if ne .Values.env "prod"}}.{{.Values.env}}{{end}}.couchmate.com
        secretName: {{.Values.env}}-grafana-tls